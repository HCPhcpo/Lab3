void put(int key, int value) {
    int index = hashFunction(key, capacity);
    Entry* current = table[index];
    
    // Check if key exists and update if found
    while (current != nullptr) {
        if (current->key == key) {
            current->value = value;  // Update existing key
            return;
        }
        current = current->next;
    }

    // Key doesn't exist, insert new entry at the head of the list
    Entry* newEntry = new Entry(key, value, table[index]);
    table[index] = newEntry;
    count++;

    // Ensure load factor and resize if needed
    ensureLoadFactor(count);
}

void ensureLoadFactor(int current_size) {
    int maxAllowedSize = static_cast<int>(0.75 * capacity);
    if (current_size >= maxAllowedSize) {
        int newCapacity = static_cast<int>(capacity * 1.5);
        rehash(newCapacity);
    }
}

void rehash(int newCapacity) {
    Entry** oldTable = table;
    int oldCapacity = capacity;

    // Update capacity and create a new table
    capacity = newCapacity;
    table = new Entry*[capacity];
    for (int i = 0; i < capacity; i++) {
        table[i] = nullptr;
    }

    // Rehash all entries from old table
    for (int i = 0; i < oldCapacity; i++) {
        Entry* entry = oldTable[i];
        while (entry != nullptr) {
            int newIndex = hashFunction(entry->key, capacity);
            Entry* nextEntry = entry->next;
            entry->next = table[newIndex];
            table[newIndex] = entry;
            entry = nextEntry;
        }
    }

    // Delete the old table
    delete[] oldTable;
}
