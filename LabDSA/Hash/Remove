V remove(int key) {
    // Calculate the index using the hash function
    int index = hashFunction(key, capacity);

    // Access the linked list at that index
    Entry* current = table[index];
    Entry* prev = nullptr;

    // Traverse the list to find the key
    while (current != nullptr) {
        if (current->key == key) {
            V removedValue = current->value;

            // If current is the first entry at this index
            if (prev == nullptr) {
                table[index] = current->next;
            } else {
                prev->next = current->next;
            }

            delete current;  // Free the removed node
            count--;  // Decrease the count of elements
            return removedValue;
        }
        prev = current;
        current = current->next;
    }

    // If the key was not found
    throw std::out_of_range("Key not found");
}
